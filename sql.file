CREATE TABLE Authors (
    author_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    birth_date DATE
);

CREATE TABLE Books (
    book_id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    author_id INT,
    publish_date DATE,
    FOREIGN KEY (author_id) REFERENCES Authors(author_id)
);

CREATE TABLE Members (
    member_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL
);

CREATE TABLE Loans (
    loan_id INT AUTO_INCREMENT PRIMARY KEY,
    book_id INT,
    member_id INT,
    loan_date DATE,
    return_date DATE,
    FOREIGN KEY (book_id) REFERENCES Books(book_id),
    FOREIGN KEY (member_id) REFERENCES Members(member_id)
);
INSERT INTO Authors (name, birth_date) VALUES
('J.K. Rowling', '1965-07-31'),
('George Orwell', '1903-06-25');

INSERT INTO Books (title, author_id, publish_date) VALUES
('Harry Potter and the Philosopher\'s Stone', 1, '1997-06-26'),
('1984', 2, '1949-06-08');

INSERT INTO Members (name, email) VALUES
('Alice Smith', 'alice@email.com'),
('Bob Johnson', 'bob@email.com');

INSERT INTO Loans (book_id, member_id, loan_date, return_date) VALUES
(1, 1, '2025-05-01', '2025-05-15'),
(2, 2, '2025-04-20', '2025-05-10');
CREATE TABLE Users (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL
);

CREATE TABLE Tasks (
    task_id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    description TEXT,
    due_date DATE,
    status ENUM('pending', 'completed') DEFAULT 'pending',
    user_id INT,
    FOREIGN KEY (user_id) REFERENCES Users(user_id)
);
npm init -y
npm install express mysql2 body-parser
const express = require('express');
const mysql = require('mysql2');
const bodyParser = require('body-parser');

const app = express();
const port = 3000;

// Middleware to parse JSON bodies
app.use(bodyParser.json());

// MySQL connection
const db = mysql.createConnection({
    host: 'localhost',
    user: 'root',
    password: 'password',
    database: 'task_manager'
});

// Connect to MySQL
db.connect(err => {
    if (err) {
        console.error('Could not connect to MySQL', err);
        return;
    }
    console.log('Connected to MySQL');
});

// Create a Task (Create)
app.post('/tasks', (req, res) => {
    const { title, description, due_date, user_id } = req.body;
    const query = 'INSERT INTO Tasks (title, description, due_date, user_id) VALUES (?, ?, ?, ?)';
    db.query(query, [title, description, due_date, user_id], (err, result) => {
        if (err) {
            res.status(500).send('Error creating task');
            return;
        }
        res.status(201).send('Task created');
    });
});

// Get all Tasks (Read)
app.get('/tasks', (req, res) => {
    const query = 'SELECT * FROM Tasks';
    db.query(query, (err, results) => {
        if (err) {
            res.status(500).send('Error retrieving tasks');
            return;
        }
        res.json(results);
    });
});

// Update a Task (Update)
app.put('/tasks/:id', (req, res) => {
    const taskId = req.params.id;
    const { title, description, due_date, status } = req.body;
    const query = 'UPDATE Tasks SET title = ?, description = ?, due_date = ?, status = ? WHERE task_id = ?';
    db.query(query, [title, description, due_date, status, taskId], (err, result) => {
        if (err) {
            res.status(500).send('Error updating task');
            return;
        }
        res.send('Task updated');
    });
});

// Delete a Task (Delete)
app.delete('/tasks/:id', (req, res) => {
    const taskId = req.params.id;
    const query = 'DELETE FROM Tasks WHERE task_id = ?';
    db.query(query, [taskId], (err, result) => {
        if (err) {
            res.status(500).send('Error deleting task');
            return;
        }
        res.send('Task deleted');
    });
});

// Start the server
app.listen(port, () => {
    console.log(`Server running at http://localhost:${port}`);
});
